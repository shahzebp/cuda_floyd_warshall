#include<stdio.h>
#include<iostream>
#include <cstdlib>
#include <sys/time.h>
#include<limits.h>
#include<algorithm>
#include <cilk.h>
#include <cilkview.h>
#include <string>

using namespace std;

/* maxVertices represents maximum number of vertices that can be present in the graph. */
#ifndef maxVertices
#define maxVertices   8192
#endif
#define INF           INT_MAX-1

int dist[maxVertices][maxVertices];

int vertices;

void FloydWarshall(int vertices)
{
        
	for(int via=0;via<vertices;via++)
	{
		for(int from=0;from<vertices;from++)
        	{
                	cilk_for(int to=0;to<vertices;to++)
                	{
                        	if(from!=to && from!=via && to!=via)
					dist[from][to] = min(dist[from][to],dist[from][via]+dist[via][to]);
			}
                }
        }
}


int edges;


int cilk_main(int argc, char *argv[])
{

	char *arg_vertices = getenv("N_VERTICES");
	
	vertices = atoi(arg_vertices);

	for(int i = 0 ; i < vertices ; i++ )
	{
		for(int j = 0 ; j< vertices; j++ )       
		{
			if( i == j )
				dist[i][j] = 0;
			else {
				int num = i + j;

				if (num % 3 == 0)
					 dist[i][j] = num / 2;
				else if (num % 2 == 0)
					 dist[i][j] = num * 2;
				else
					 dist[i][j] = num;
			}
	

		}
	}	

    	struct timeval tvalBefore, tvalAfter;
    	gettimeofday (&tvalBefore, NULL);	
	FloydWarshall(vertices);
    	gettimeofday (&tvalAfter, NULL);
    	printf("Time: %ld microseconds\n",
        	((tvalAfter.tv_sec - tvalBefore.tv_sec)*1000000L
        	+tvalAfter.tv_usec) - tvalBefore.tv_usec
        	);
	return 0;
}
